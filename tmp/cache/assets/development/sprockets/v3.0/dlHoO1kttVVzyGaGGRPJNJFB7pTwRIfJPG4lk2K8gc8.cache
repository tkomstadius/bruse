I"„(function() {
  this.bruseApp.directive('bDropzone', function() {
    return {
      restrict: 'A',
      scope: {
        theFiles: '=',
        images: '=',
        drop: '=',
        saved: '=',
        info: '=',
        noType: '='
      },
      link: function(scope, element, attrs) {
        var addEntries, addFile, addFileFromDir, processDragOverOrEnter;
        processDragOverOrEnter = function(event) {
          if (event != null) {
            event.preventDefault();
          }
          (event.originalEvent || event).dataTransfer.effectAllowed = 'move';
          return false;
        };
        addFile = function(file) {
          var obj, reader;
          obj = {};
          obj.name = file.name;
          obj.type = file.type;
          reader = new FileReader();
          reader.onload = function(evt) {
            return scope.$apply(function() {
              var ref;
              obj.data = reader.result.split(",")[1];
              scope.drop = true;
              scope.info = '';
              scope.theFiles.push(obj);
              if ((ref = file.type) === 'image/jpeg' || ref === 'image/png' || ref === 'image/tiff' || ref === 'image/gif') {
                scope.images.push(evt.target.result);
              }
            });
          };
          if (file.type !== '') {
            reader.readAsDataURL(file);
          } else {
            scope.$apply(function() {
              return scope.noType = scope.noType + file.name + " has no type and can not be saved";
            });
          }
          return false;
        };
        addFileFromDir = function(entry) {
          return entry.file(addFile);
        };
        addEntries = function(entry) {
          var dirReader;
          if (entry.isFile) {
            return addFileFromDir(entry);
          } else if (entry.isDirectory) {
            dirReader = entry.createReader();
            return dirReader.readEntries(function(ent) {
              var i, results;
              i = 0;
              results = [];
              while (i < ent.length) {
                addEntries(ent[i]);
                results.push(i++);
              }
              return results;
            });
          }
        };
        element.bind('dragover', processDragOverOrEnter);
        element.bind('dragenter', processDragOverOrEnter);
        return element.bind('drop', function(event) {
          var entry, files, i, items, results;
          if (event != null) {
            event.preventDefault();
          }
          items = event.originalEvent.dataTransfer.items;
          files = event.originalEvent.dataTransfer.files;
          scope.noType = '';
          i = 0;
          results = [];
          while (i < items.length) {
            entry = items[i].webkitGetAsEntry();
            if (entry.isFile) {
              scope.images = [];
              scope.saved = false;
              addFile(files[i]);
            } else if (entry.isDirectory) {
              scope.images = [];
              scope.saved = false;
              addEntries(entry);
            }
            results.push(i++);
          }
          return results;
        });
      }
    };
  });

}).call(this);
:ET