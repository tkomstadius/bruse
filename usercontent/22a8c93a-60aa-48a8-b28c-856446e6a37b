/* --- Spell checker ---
- given a dictionary and a text file checks which words of the text file 
  do not occur in the dictionary (misspellings)
- the dictionary is provided as a text file
- the program should display a list of all misspellings togheter with
  the number of occurences of each misspellings in the text file
- STL cannot be used

****************************************************************************

 hash table with lists, collisions lists
- read the dictionary and add to a hash table
- n > 0, number of words in the dictionary
- let's say no more that two objects in each list
- size_of_table(next_prime(n/2)
- text with m > 0 number of words
- read input from user, find the word in the hash table, if it is not there
  then it is misspeller
- add misspelled word to a list and add a counter for number of times the 
  word is misspelled

****************************************************************************

Build the dictinary, a hash table
while(text_file >> w
{
  if w not in the dictionary then
    if new misspelling then
      insert w into list L
    else increment counter of w in L
}
Display all misspelled words in L

****************************************************************************

Time complexity in the worst case
- how can we discover that it is a new misspelling? Need to search the list of 
  misspellings
- to build the dictionary O(n) average
repeated m times**
- to check if a word is in the dictionary O(1) average
- to check if it's a new misspelled word O(m) worst
  all the words in the text is uniquley misspelled
- to insert a new misspelled word into L O(1) worst
**
- to display all misspelled words O(m) worst
= O(n) + O(mÂ²)

***************************************************************************

Add the misspelled words into the dictionary

while(file >> w)
{
  T.find(w) == false;
    add with counter = 1
  T.find(w) == true
    if counter == 0 
      continue
    else
      increment counter
}

- displaying will cost you beacause you need to find all the words with 
  counter > 0
- T(n,m) = O(n) + O(m) + O(n+m)
- S(n,m) = O(n) + O(n + m + 4 + 4) = O(n) + O(n + m)


*/